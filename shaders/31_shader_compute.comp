#version 450

// storage image 的 GLSL 着色器声明类似于例如在片段着色器中使用的采样图像（不过本教程没有使用 storage image）
// 此处的一些区别在于额外的属性，例如图像格式的 rgba8，readonly 和 writeonly 限定符，告诉实现我们将仅从输入图像读取并写入输出图像，以及用 image2D 来声明
// layout(binding = 1) uniform sampler2D texSampler;
// layout(binding = 0, rgba8) uniform readonly image2D inputImage;
// layout(binding = 1, rgba8) uniform writeonly image2D outputImage;

// 然后在计算着色器中可以使用 imageLoad 和 imageStore 完成存储图像的读取和写入
// vec3 pixel = imageLoad(inputImage, ivec2(gl_GlobalInvocationID.xy)).rgb;
// imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), pixel);

struct Particle {
    vec2 position;
    vec2 velocity;
    vec4 color;
};

// 着色器输入的声明
layout (binding = 0) uniform ParameterUBO { // 包含时间变化量的 UBO
    float deltaTime;
} ubo;
layout(std140, binding = 1) readonly buffer ParticleSSBOIn { // 来自上一帧的粒子数据的 SSBO
   Particle particlesIn[ ];
};
layout(std140, binding = 2) buffer ParticleSSBOOut { // 当前帧粒子数据的 SSBO
   Particle particlesOut[ ];
};

// 与计算空间相关的仅计算声明，定义了当前工作组中此计算着色器的调用次数。这是计算空间的局部部分，因此带有 local_ 前缀
// 由于我们处理的是粒子的线性 1D 数组，只指定了 x 轴的工作组大小
layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main()
{
    uint index = gl_GlobalInvocationID.x; // 内置变量 gl_GlobalInvocationID，当前分发中当前计算着色器调用的唯一标识，使用它作为索引

    Particle particleIn = particlesIn[index];

    // 具体的计算操作很简单，把速度跟时间变化量相乘得到位移，加到原来的位置上
    particlesOut[index].position = particleIn.position + particleIn.velocity.xy * ubo.deltaTime;
    particlesOut[index].velocity = particleIn.velocity;

    // 如果撞到边界了就反弹
    // 反弹时没有直接对位置进行取反，而是需要对速度不断累积才能回来，因此如果有粒子在边界处停留一段时间是正常的（尤其是切向反弹、法向速度较小的粒子）
    if ((particlesOut[index].position.x <= -1.0) || (particlesOut[index].position.x >= 1.0)) {
        particlesOut[index].velocity.x = -particlesOut[index].velocity.x;
    }
    if ((particlesOut[index].position.y <= -1.0) || (particlesOut[index].position.y >= 1.0)) {
        particlesOut[index].velocity.y = -particlesOut[index].velocity.y;
    }
}